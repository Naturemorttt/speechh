from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import gradio as gr
import pyaudio
import wave
import threading
import time
import os
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
RECORD_SECONDS = 15
CHUNK = 1024
FORMAT = pyaudio.paInt32
CHANNELS = 1
RATE = 44100
MICROSERVICE_URL = "http://localhost:8000/transcribe/"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_recording = False
frames = []
stream = None
p = None

app = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
post_text = ""

def wav_to_binary(wav_file_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç WAV –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª"""
    binary_file_path = os.path.splitext(wav_file_path)[0] + '.bin'
    try:
        with open(wav_file_path, 'rb') as wav_file, open(binary_file_path, 'wb') as binary_file:
            binary_file.write(wav_file.read())
        return binary_file_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return None

def send_to_microservice(binary_file_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        with open(binary_file_path, 'rb') as f:
            files = {'file': (os.path.basename(binary_file_path), f, 'application/octet-stream')}
            response = requests.post(MICROSERVICE_URL, files=files)
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            result = response.json()
            return result.get('transcription', '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ')
        else:
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} - {response.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"

def record_audio(output_filename):
    global is_recording, frames, stream, p, post_text
    
    if not is_recording:
        # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        is_recording = True
        frames = []
        p = pyaudio.PyAudio()
        stream = p.open(format=FORMAT, channels=CHANNELS, 
                       rate=RATE, input=True,
                       frames_per_buffer=CHUNK)
        
        def recording_thread():
            global is_recording, frames
            for _ in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
                if not is_recording:
                    break
                data = stream.read(CHUNK, exception_on_overflow=False)
                frames.append(data)
            is_recording = False
        
        threading.Thread(target=recording_thread).start()
        return "–ó–∞–ø–∏—Å—å...", post_text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
    else:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        is_recording = False
        time.sleep(0.1)
        
        if stream:
            stream.stop_stream()
            stream.close()
        if p:
            p.terminate()
        
        result_text = post_text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if frames:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV
            with wave.open(output_filename, 'wb') as wf:
                wf.setnchannels(CHANNELS)
                wf.setsampwidth(p.get_sample_size(FORMAT))
                wf.setframerate(RATE)
                wf.writeframes(b''.join(frames))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–π
            binary_path = wav_to_binary(output_filename)
            if binary_path:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = send_to_microservice(binary_path)
            
            duration = len(frames)/RATE
            status = f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({duration:.1f} —Å–µ–∫)"
            return status, result_text
        
        return "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", post_text

# –°–æ–∑–¥–∞–µ–º Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks() as demo:
    gr.Markdown("## –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
    with gr.Row():
        audio_input = gr.Textbox(label="–ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)", value="recording")
        record_btn = gr.Button("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", variant="primary")
    
    status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", value="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏", interactive=False)
    transcription = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", interactive=False)
    
    # –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è .wav
    wav_input = gr.Textbox(value="recording.wav", visible=False)
    
    record_btn.click(
        fn=record_audio,
        inputs=wav_input,
        outputs=[status, transcription]
    )
    
    audio_input.change(
        fn=lambda x: x + ".wav" if x and not x.endswith(".wav") else x,
        inputs=audio_input,
        outputs=wav_input
    )

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
@app.post("/api/set-text/")
async def set_text(request: Request):
    global post_text
    try:
        data = await request.json()
        post_text = data.get("text", "")
        return JSONResponse({
            "status": "success", 
            "text": post_text,
            "message": "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ –ø–æ–ª–µ '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏'"
        })
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

# –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
@app.get("/api/get-text/")
async def get_text():
    global post_text
    return JSONResponse({"text": post_text})

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = gr.mount_gradio_app(app, demo, path="/gradio")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)